{"version":3,"sources":["serviceWorker.js","components/AppHeader/AppHeader.js","components/SearchPanel/SearchPanel.js","components/TodoListItem/TodoListItem.js","components/TodoList/TodoList.js","components/ItemStatusFilter/ItemStatusFilter.js","components/ItemAddForm/ItemAddForm.js","components/App/App.js","index.js"],"names":["Boolean","window","location","hostname","match","AppHeader","toDo","done","className","SearchPanel","state","term","onSearchChange","e","target","value","setState","props","type","placeholder","this","onChange","Component","TodoListItem","label","onDeleted","onToggleDone","onToggleImportant","classNames","important","onClick","TodoList","todos","elements","map","item","id","itemsProps","key","ItemStatusFilter","buttons","name","filter","onFilterChange","clazz","ItemAddForm","onLabelChange","onSubmit","preventDefault","onAdded","App","maxId","todoData","createTodoItem","addItem","text","length","newItem","deleteItem","idx","findIndex","el","slice","toggleProps","arr","propName","oldItem","items","toLowerCase","indexOf","visibleItems","search","doneCount","todoCount","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f69bb2bd.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport './AppHeader.css';\r\n\r\nconst AppHeader = ({ toDo, done }) => {\r\n    return (\r\n        <div className=\"app-header d-flex\">\r\n            <h1>Todo List</h1>\r\n            <h2>{toDo} tasks to do, {done} done</h2>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AppHeader;","import React, { Component } from 'react';\r\nimport \"./SearchPanel.css\";\r\n\r\nexport default class SearchPanel extends Component {\r\n\r\n    state = {\r\n        term: ''\r\n    }\r\n\r\n    onSearchChange = (e) => {\r\n        const term = e.target.value;\r\n        this.setState({ term })\r\n        this.props.onSearchChange(term);\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <input type=\"text\"\r\n                    className=\"form-control search-input\"\r\n                    placeholder=\"Search task\"\r\n                    value={this.state.term}\r\n                    onChange={this.onSearchChange}></input>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport \"./TodoListItem.css\";\r\n\r\nexport default class TodoListItem extends Component {\r\n\r\n    // state = {\r\n    //     done: false,\r\n    //     important: false\r\n    // };\r\n    // onLabelClick = () => {\r\n    //     this.setState(({ done }) => {\r\n    //         return {\r\n    //             done: !done\r\n    //         }\r\n    //     });\r\n    // }\r\n    // onMarkImportant = () => {\r\n    //     this.setState(({ important }) => {\r\n    //         return {\r\n    //             important: !important\r\n    //         };\r\n    //     });\r\n    // };\r\n\r\n    render() {\r\n        const { label, onDeleted, onToggleDone, onToggleImportant, done, important } = this.props;\r\n\r\n        let classNames = \"todo-list-item\";\r\n        if (done) {\r\n            classNames += \" done\";\r\n        }\r\n        if (important) {\r\n            classNames += \" important\";\r\n        }\r\n\r\n        return (\r\n            <span className={classNames}>\r\n                <span\r\n                    className=\"todo-list-item-label\"\r\n                    onClick={onToggleDone}>\r\n                    {label}\r\n                </span>\r\n\r\n                <button type=\"button\"\r\n                    className=\"btn btn-outline-success btn-sm float-right\"\r\n                    onClick={onToggleImportant}>\r\n                    <i className=\"fa fa-star\" />\r\n                </button>\r\n\r\n                <button type=\"button\"\r\n                    className=\"btn btn-outline-danger btn-sm float-right\"\r\n                    onClick={onDeleted}>\r\n                    <i className=\"fa fa-trash\" />\r\n                </button>\r\n            </span>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport TodoListItem from '../TodoListItem/TodoListItem';\r\nimport './TodoList.css';\r\n\r\nconst TodoList = ({ todos, onDeleted, onToggleDone, onToggleImportant }) => {\r\n\r\n    const elements = todos.map((item) => {\r\n        const { id, ...itemsProps } = item;\r\n        return (\r\n            <li key={id} className=\"list-group-item\">\r\n                <TodoListItem\r\n                    {...itemsProps}\r\n                    onDeleted={() => onDeleted(id)}\r\n                    onToggleImportant={() => onToggleImportant(id)}\r\n                    onToggleDone={() => onToggleDone(id)} />\r\n            </li>\r\n        );\r\n    });\r\n\r\n    return (\r\n        <ul className=\"list-group todo-list\">\r\n            { elements}\r\n        </ul>\r\n    );\r\n};\r\n\r\nexport default TodoList;","import React, { Component } from 'react';\r\nimport './ItemStatusFilter.css';\r\n\r\nexport default class ItemStatusFilter extends Component {\r\n    buttons = [\r\n        { name: 'all', label: 'All' },\r\n        { name: 'active', label: 'Active' },\r\n        { name: 'done', label: 'Done' }\r\n    ]\r\n    render() {\r\n\r\n        const { filter, onFilterChange } = this.props;\r\n        const buttons = this.buttons.map(({ name, label }) => {\r\n            const isActive = filter === name;\r\n            const clazz = isActive ? 'btn-active' : \"btn-none\";\r\n            return (\r\n                <button type=\"button\"\r\n                    className={`btn ${clazz}`}\r\n                    key={name}\r\n                    onClick={() => onFilterChange(name)}>{label}</button>\r\n            )\r\n        })\r\n        return (\r\n            <div className=\"btn-group\">\r\n                {buttons}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport './ItemAddForm.css';\r\n\r\nexport default class ItemAddForm extends Component {\r\n    state = {\r\n        label: ''\r\n    }\r\n\r\n    onLabelChange = (e) => {\r\n        this.setState({\r\n            label: e.target.value\r\n        });\r\n    }\r\n    onSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.onAdded(this.state.label);\r\n        this.setState({\r\n            label: ''\r\n        });\r\n    }\r\n    render() {\r\n        return (\r\n            <form className=\"item-add-form d-flex\" onSubmit={this.onSubmit}>\r\n                <input type=\"text\" className=\"form-control\" onChange={this.onLabelChange}\r\n                    placeholder=\"What needs to be done...\" value={this.state.label} />\r\n                <button\r\n                    className=\"btn btn-outline-secondary btn-add\">\r\n                    Add Item\r\n                </button>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nimport AppHeader from '../AppHeader/AppHeader';\r\nimport SearchPanel from '../SearchPanel/SearchPanel';\r\nimport TodoList from '../TodoList/TodoList';\r\nimport ItemStatusFilter from '../ItemStatusFilter/ItemStatusFilter';\r\nimport ItemAddForm from '../ItemAddForm/ItemAddForm';\r\n\r\nimport './App.css';\r\n\r\nexport default class App extends Component {\r\n\r\n    maxId = 100;\r\n\r\n    state = {\r\n        todoData: [\r\n            this.createTodoItem('Drink Coffee'),\r\n            this.createTodoItem('Make a dinner'),\r\n            this.createTodoItem('Pay the check')\r\n        ],\r\n        term: '',\r\n        filter: 'all' //all, active, done\r\n    }\r\n\r\n    createTodoItem(label) {\r\n        return {\r\n            label,\r\n            important: false,\r\n            done: false,\r\n            id: this.maxId++\r\n        }\r\n    }\r\n    addItem = (text) => {\r\n        if (text.length) {\r\n            const newItem = this.createTodoItem(text);\r\n\r\n            this.setState(({ todoData }) => {\r\n                const newArray = [...todoData,\r\n                    newItem]\r\n                return {\r\n                    todoData: newArray\r\n                }\r\n            })\r\n        }\r\n\r\n    }\r\n    deleteItem = (id) => {\r\n        this.setState(({ todoData }) => {\r\n            const idx = todoData.findIndex((el) => el.id === id);\r\n\r\n            const newArray = [...todoData.slice(0, idx),\r\n            ...todoData.slice(idx + 1)]\r\n            return {\r\n                todoData: newArray\r\n            }\r\n        });\r\n    };\r\n\r\n    toggleProps = (arr, id, propName) => {\r\n        const idx = arr.findIndex((el) => el.id === id);\r\n\r\n        const oldItem = arr[idx];\r\n        const newItem = { ...oldItem, [propName]: !oldItem[propName] };\r\n\r\n        return [\r\n            ...arr.slice(0, idx),\r\n            newItem,\r\n            ...arr.slice(idx + 1)];\r\n    };\r\n\r\n\r\n    onToggleImportant = (id) => {\r\n        this.setState(({ todoData }) => {\r\n            return {\r\n                todoData: this.toggleProps(todoData, id, 'important')\r\n            };\r\n        });\r\n    };\r\n\r\n    onToggleDone = (id) => {\r\n        this.setState(({ todoData }) => {\r\n            return {\r\n                todoData: this.toggleProps(todoData, id, 'done')\r\n            };\r\n        });\r\n    };\r\n\r\n    filter(items, filter) {\r\n        switch (filter) {\r\n            case 'all':\r\n                return items;\r\n            case 'active':\r\n                return items.filter(item => !item.done);\r\n            case 'done':\r\n                return items.filter(item => item.done);\r\n            default:\r\n                return items;\r\n        }\r\n    }\r\n    search(items, term) {\r\n        if (term.length === 0) {\r\n            return items;\r\n        }\r\n        return items.filter((item) => {\r\n            return item.label.toLowerCase().indexOf(term) > - 1;\r\n        })\r\n    }\r\n    onSearchChange = (term) => {\r\n        this.setState({ term });\r\n    }\r\n    onFilterChange = (filter) => {\r\n        this.setState({ filter });\r\n    }\r\n\r\n    render() {\r\n        const { todoData, term, filter } = this.state;\r\n\r\n        const visibleItems = this.filter(\r\n            this.search(todoData, term), filter);\r\n\r\n        const doneCount = todoData.filter((el) => el.done).length;\r\n        const todoCount = todoData.length - doneCount;\r\n        return (\r\n            <div className=\"todo-app\">\r\n                <ItemAddForm onAdded={this.addItem}></ItemAddForm>\r\n                <AppHeader toDo={todoCount} done={doneCount} />\r\n                <div className=\"top-panel d-flex\">\r\n                    <SearchPanel onSearchChange={this.onSearchChange} />\r\n                    <ItemStatusFilter filter={filter} onFilterChange={this.onFilterChange} />\r\n                </div>\r\n                <TodoList\r\n                    todos={visibleItems}\r\n                    onDeleted={this.deleteItem}\r\n                    onToggleImportant={this.onToggleImportant}\r\n                    onToggleDone={this.onToggleDone} />\r\n            </div>\r\n        );\r\n    }\r\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from './components/App/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}